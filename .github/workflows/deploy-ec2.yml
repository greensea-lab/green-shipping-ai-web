name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build production
        run: npm run build:prod
        env:
          CI: false

      - name: Create deployment package
        run: |
          cd build
          tar -czf ../deploy.tar.gz .
          cd ..
          echo "📦 배포 패키지 생성 완료"

      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ubuntu/app"

      - name: Execute deployment commands on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            
            echo "🔄 배포 시작..."
            
            # 백업 생성
            if [ -d "/var/www/green-shipping-ai-web" ]; then
              BACKUP_DIR="/var/www/green-shipping-ai-web.backup.$(date +%Y%m%d_%H%M%S)"
              echo "💾 백업 생성: $BACKUP_DIR"
              sudo cp -r /var/www/green-shipping-ai-web $BACKUP_DIR
              
              # 오래된 백업 삭제 (7일 이상)
              sudo find /var/www -name "green-shipping-ai-web.backup.*" -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
            fi
            
            # 배포 디렉토리 생성
            sudo mkdir -p /var/www/green-shipping-ai-web
            
            # 임시 디렉토리 정리 및 생성 (sudo 사용)
            echo "🗑️  기존 임시 디렉토리 정리..."
            sudo rm -rf /tmp/green-shipping-deploy
            mkdir -p /tmp/green-shipping-deploy
            
            # 파일 압축 해제
            echo "📂 파일 압축 해제 중..."
            tar -xzf deploy.tar.gz -C /tmp/green-shipping-deploy
            
            echo "📋 압축 해제된 파일 확인..."
            ls -la /tmp/green-shipping-deploy/
            
            # 파일 복사
            echo "📋 파일 복사 중..."
            sudo rm -rf /var/www/green-shipping-ai-web/*
            sudo cp -r /tmp/green-shipping-deploy/* /var/www/green-shipping-ai-web/
            
            # 권한 설정 (403 에러 방지)
            echo "🔒 권한 설정 중..."
            sudo chown -R www-data:www-data /var/www/green-shipping-ai-web
            sudo chmod -R 755 /var/www/green-shipping-ai-web
            
            # 파일 권한 확인
            echo "✅ 배포된 파일 확인:"
            ls -lh /var/www/green-shipping-ai-web/ | head -5
            
            # index.html 존재 확인
            if [ -f "/var/www/green-shipping-ai-web/index.html" ]; then
              echo "✅ index.html 파일 존재"
            else
              echo "❌ index.html 파일 없음!"
              exit 1
            fi
            
            # Nginx 재시작
            echo "🔄 Nginx 재시작 중..."
            sudo systemctl reload nginx
            
            # 임시 파일 정리
            rm -rf /tmp/green-shipping-deploy
            rm deploy.tar.gz
            
            echo "✅ 배포 완료!"

      - name: Health check
        timeout-minutes: 2
        continue-on-error: false
        run: |
          echo "🏥 Health Check 시작..."
          echo "🌐 대상 URL: ${{ secrets.APP_URL }}"
          echo ""
          
          # 최대 30초 동안 재시도
          MAX_ATTEMPTS=6
          ATTEMPT=0
          SUCCESS=false
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🔄 시도 $ATTEMPT/$MAX_ATTEMPTS"
            
            # HTTP 상태 코드 확인
            HTTP_CODE=$(curl -s --max-time 5 -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }} || echo "000")
            echo "📡 HTTP 상태 코드: $HTTP_CODE"
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ 서버 응답 정상 (HTTP 200)"
              
              # React 앱 확인
              echo "🔍 React 앱 확인 중..."
              if curl -s --max-time 5 ${{ secrets.APP_URL }} | grep -q '<div id="root">'; then
                echo "✅ React 앱 로드 확인"
                SUCCESS=true
                break
              else
                echo "⚠️  HTML은 로드되었지만 React root div를 찾을 수 없음"
              fi
            else
              echo "❌ 서버 응답 실패 (HTTP $HTTP_CODE)"
            fi
            
            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "⏳ 5초 후 재시도..."
              sleep 5
            fi
          done
          
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if [ "$SUCCESS" = true ]; then
            echo "🎉 Health Check 통과!"
            exit 0
          else
            echo "❌ Health Check 실패 (30초 타임아웃)"
            echo ""
            echo "🔍 디버깅 정보:"
            echo "1. EC2 인스턴스가 실행 중인지 확인하세요"
            echo "2. Nginx가 실행 중인지 확인하세요: sudo systemctl status nginx"
            echo "3. 파일이 배포되었는지 확인하세요: ls -la /var/www/green-shipping-ai-web"
            echo "4. Nginx 에러 로그: sudo tail -50 /var/log/nginx/error.log"
            exit 1
          fi

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "================================================"
            echo "✅ 배포 성공!"
            echo "================================================"
            echo "🌐 URL: ${{ secrets.APP_URL }}"
            echo "⏰ 배포 시간: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "🎉 모든 테스트 통과"
            echo "================================================"
          else
            echo "================================================"
            echo "❌ 배포 실패"
            echo "================================================"
            echo "GitHub Actions 로그를 확인하여 문제를 파악하세요"
            echo "================================================"
          fi
