name: Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build production
        run: npm run build:prod
        env:
          CI: false

      - name: Create deployment package
        run: |
          cd build
          tar -czf ../deploy.tar.gz .
          cd ..
          echo "📦 배포 패키지 생성 완료"

      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ubuntu/app"

      - name: Execute deployment commands on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            
            echo "🔄 배포 시작..."
            
            # 백업 생성
            if [ -d "/var/www/green-shipping-ai-web" ]; then
              BACKUP_DIR="/var/www/green-shipping-ai-web.backup.$(date +%Y%m%d_%H%M%S)"
              echo "💾 백업 생성: $BACKUP_DIR"
              sudo cp -r /var/www/green-shipping-ai-web $BACKUP_DIR
              
              # 오래된 백업 삭제 (7일 이상)
              sudo find /var/www -name "green-shipping-ai-web.backup.*" -mtime +7 -exec rm -rf {} \; 2>/dev/null || true
            fi
            
            # 배포 디렉토리 생성
            sudo mkdir -p /var/www/green-shipping-ai-web
            sudo mkdir -p /tmp/green-shipping-deploy
            
            # 파일 압축 해제 및 복사
            echo "📂 파일 압축 해제 중..."
            tar -xzf deploy.tar.gz -C /tmp/green-shipping-deploy
            
            echo "📋 파일 복사 중..."
            sudo rm -rf /var/www/green-shipping-ai-web/*
            sudo cp -r /tmp/green-shipping-deploy/* /var/www/green-shipping-ai-web/
            
            # 권한 설정
            echo "🔒 권한 설정 중..."
            sudo chown -R www-data:www-data /var/www/green-shipping-ai-web
            sudo chmod -R 755 /var/www/green-shipping-ai-web
            
            # Nginx 재시작
            echo "🔄 Nginx 재시작 중..."
            sudo systemctl reload nginx
            
            # 임시 파일 정리
            rm -rf /tmp/green-shipping-deploy
            rm deploy.tar.gz
            
            echo "✅ 배포 완료!"

      - name: Wait for server
        run: |
          echo "⏳ 서버 준비 대기 중..."
          sleep 10

      - name: Health check
        run: |
          echo "🏥 Health Check 시작..."
          
          # 기본 연결 테스트
          if curl -f -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }} | grep -q "200"; then
            echo "✅ 서버 응답 정상 (HTTP 200)"
          else
            echo "❌ 서버 응답 실패"
            exit 1
          fi
          
          # HTML 컨텐츠 확인
          if curl -s ${{ secrets.APP_URL }} | grep -q '<div id="root">'; then
            echo "✅ React 앱 로드 확인"
          else
            echo "❌ React 앱 로드 실패"
            exit 1
          fi
          
          # 응답 시간 측정
          response_time=$(curl -o /dev/null -s -w '%{time_total}' ${{ secrets.APP_URL }})
          echo "⏱️  응답 시간: ${response_time}초"
          
          echo "🎉 Health Check 통과!"

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "================================================"
            echo "✅ 배포 성공!"
            echo "================================================"
            echo "🌐 URL: ${{ secrets.APP_URL }}"
            echo "⏰ 배포 시간: $(date '+%Y-%m-%d %H:%M:%S')"
            echo "🎉 모든 테스트 통과"
            echo "================================================"
          else
            echo "================================================"
            echo "❌ 배포 실패"
            echo "================================================"
            echo "GitHub Actions 로그를 확인하여 문제를 파악하세요"
            echo "================================================"
          fi
